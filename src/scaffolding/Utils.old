/*
Helper functions accessable by all other .ts files
*/
export default class Utils{

	//removes any html tags from a string
	static stripTags(val){
		return val.replace(/(<([^>]+)>)/ig,"");
	}

	static getAuthCode(type){

		var id;
		switch (type){
			case "facebook":id = 1; break;
			case "device": 	id = 2; break;
			case "email": 	id = 3; break;
			case "twitter": id = 4; break;
			default  : 		id = 2;
		}
		return id;
	}

	static ie11(){
		return !(window["ActiveXObject"]) && "ActiveXObject" in window;
	}

	static capitalise(str){
	    return str.charAt(0).toUpperCase() + str.slice(1);
	}

	static generateUUID(){
	    var d = new Date().getTime();
	    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
	        var r = (d + Math.random()*16)%16 | 0;
	        d = Math.floor(d/16);
	        return (c=='x' ? r : (r&0x7|0x8)).toString(16);
	    });
	    return uuid;
	}

	static ajaxifyForm(form:any, onComplete:any=false){
		if(!form.data('ajaxified')){
			form.data('ajaxified','1');
			form.ajaxForm({
				complete: function (xhr) {
					if(onComplete){
						var responseObj = eval("(" + xhr.responseText + ")");
						onComplete(responseObj);
					}
				}
			});
		}
		return form;
	}

	static clientTimezone(date){
		return date.addHours(-(new Date().getTimezoneOffset()/60));
	}

	
	/* --------------------------------------------------------*/
	/* ------------------------ HELPERS -----------------------*/
	/* --------------------------------------------------------*/

	static isOdd(num):boolean{
		return (num % 2) == 1
	}
	/*
	Used by the create overlay function to achieve the multiply blending in the canvas
	*/
	
		
	static step(e, t) {
	    return (t >= e) ? 1 : 0;
	}

	static minWithSign(v, m) {
	    var s = (v < 0) ? -1 : 1;
	    var vv = Math.min(Math.abs(v), m);
	    return vv * s;
	}

	static maxWithSign(v, m) {
	    var s = (v < 0) ? -1 : 1;
	    var vv = Math.max(Math.abs(v), m);
	    return vv * s;
	}

	static clamp(s, e, t) {
	    if (t < s) return s;
	    if (t > e) return e;
	    return t;
	}

	static smoothStep(e0, e1, t) {
	    if (t <= e0) return e0;
	    if (t >= e1) return e1;

	    t = (t - e0) / (e1 - e0);

	    return e0 + (e1 - e0) * (3 * t * t - 2 * t * t * t);
	}

	static easeQuadOut(e0, e1, t) {
	    return e0 + (e1 - e0) * (t * ( 2 - t ));
	}

	static detectMobile(){
		if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
 			return true;
		}else{
			return false;
		}
	}

	static detectIphone(){

		if(navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i)){
			return true;
		}else{
			return false;
		}
	}

	/*
	Returns either iOS, Android, or Unknown, and the version number
	*/
	static detectMobileOS(){

		var mobileOS;    
		var mobileOSver; 
		var ua = navigator.userAgent;
		var uaindex;

		  // determine OS
		  if ( ua.match(/iPad/i) || ua.match(/iPhone/i) ){
		    mobileOS = 'iOS';
		    uaindex  = ua.indexOf( 'OS ' );
		  }else if ( ua.match(/Android/i) ){
		    mobileOS = 'Android';
		    uaindex  = ua.indexOf( 'Android ' );
		  }else{
		    mobileOS = 'unknown';
		  }

		  // determine version
		  if ( mobileOS === 'iOS'  &&  uaindex > -1 ){
		    mobileOSver = ua.substr( uaindex + 3, 3 ).replace( '_', '.' );
		  } else if ( mobileOS === 'Android'  &&  uaindex > -1 ){
		    mobileOSver = ua.substr( uaindex + 8, 3 );
		  }else{
		    mobileOSver = 'unknown';
		  }

		  var num = Number(mobileOSver);
		  return {"os":mobileOS, "ver":num};
	}

	static detectBrowser(){
		var ua = navigator.userAgent;
		var browser;
		var ver;
		var uaindex;
		if ( ua.match(/chrome/i)){
		    browser = 'chrome';
		    uaindex  = ua.indexOf( 'Chrome' );
		  }else if ( ua.match(/safari/i)){
		    uaindex  = ua.indexOf( 'Version' );
		    browser = 'safari';
		  }else if ( ua.match(/firefox/i)){
		    uaindex  = ua.indexOf( 'Firefox' );
		    browser = 'firefox';
		  }else if ( ua.match(/trident/i)){
		    uaindex  = ua.indexOf( 'Trident' );
		    browser = 'IE';
		  }else{
		    browser = 'unknown';
		  }

		  if ( browser === 'chrome'  &&  uaindex > -1 ){
		    ver = ua.substr( uaindex + 7, 2 ).replace( '_', '.' );
		  } else if ( browser === 'firefox'  &&  uaindex > -1 ){
		    ver = ua.substr( uaindex + 8, 3 );
		 } else if ( browser === 'IE'  &&  uaindex > -1 ){
		    ver = ua.substr( uaindex + 8, 1 );
		 } else if ( browser === 'safari'  &&  uaindex > -1 ){
		    ver = ua.substr( uaindex + 8, 1 );
		  }else{
		    ver = 'unknown';
		  }
		  var num = Number(ver);
		  return {"browser":browser, "ver":num};
	}


	/* --------------------------------------------------------*/
	/* ------------------------ COOKIES -----------------------*/
	/* --------------------------------------------------------*/

	/*
	Sets a cookie to the document object
	*/
	static setCookie(c_name,value,exdays){
		var exdate=new Date();
		exdate.setDate(exdate.getDate() + exdays);
		var c_value = value + ((exdays==null) ? "" : "; expires="+exdate.toUTCString()) + ";path=/";
		document.cookie=c_name + "=" + c_value;
	}

	/*
	Retrives a cookie from the document object using the cookies name
	*/
	static getCookie(c_name){
		var c_value = document.cookie;
		var c_start = c_value.indexOf(" " + c_name + "=");
		if (c_start == -1)
		  {
		  c_start = c_value.indexOf(c_name + "=");
		  }
		if (c_start == -1)
		  {
		  c_value = null;
		  }
		else
		  {
		  c_start = c_value.indexOf("=", c_start) + 1;
		  var c_end = c_value.indexOf(";", c_start);
		  if (c_end == -1)
		  {
		c_end = c_value.length;
		}
		c_value = c_value.substring(c_start,c_end);
		}
		return c_value;
	}



	/* --------------------------------------------------------*/
	/* ---------------------- VALIDATION ----------------------*/
	/* --------------------------------------------------------*/

	/*
	Validates an email address
	*/
	static realEmail(addressToTest) {
    	var regPattern = /^[+a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/i;
   		return regPattern.test(addressToTest);
	}

	/* --------------------------------------------------------*/
	/* ------------------------- MATH -------------------------*/
	/* --------------------------------------------------------*/

	/*
	Convert degrees to radians
	*/
	static degreesToRadians(degrees:number):number
    {
        return degrees * Math.PI / 180;
    }

    /*
    convert radians to degrees
    */
    static radiansToDegrees(radians:number):number
    {
        return radians * 180 / Math.PI;
    }

	/*
	calculates the distance between two point's : p = {x:1, y:2}
	*/
	static lineDistance( point1, point2 ){
	    var xs = 0;
	    var ys = 0;
	    xs = point2.x - point1.x;
	    xs = xs * xs;
	    ys = point2.y - point1.y;
	    ys = ys * ys;
	    return Math.sqrt( xs + ys );
	}

	/*
	calculates the angle in degrees between two points
	*/
	static calcAngle(x1, x2, y1, y2)
	{
		var calcAngle = Math.atan2(x1-x2,y1-y2)*(180/Math.PI);	
		if(calcAngle < 0)	
		calcAngle = Math.abs(calcAngle);
		else
		calcAngle = 360 - calcAngle;		
		return calcAngle;
	}

	/*
	returns a number between or on the two numbers specified
	*/
	static randomFromInterval(from,to){
	    return Math.floor(Math.random()*(to-from+1)+from);
	}

	/* --------------------------------------------------------*/
	/* ------------------------- ARRAY ------------------------*/
	/* --------------------------------------------------------*/

	/*
	switches two array elements
	*/
	static swapArrayElements(array, a, b) {
	    var temp = array[a];
	    array[a] = array[b];
	    array[b] = temp;
	}

	/*
	Removes one or more objects from an array
	*/
	static removeFromArray(array, from, to?){
		var rest = array.slice((to || from) + 1 || array.length);
	  	array.length = from < 0 ? array.length + from : from;
	  	return array.push.apply(array, rest);
	}

	/*
	Shuffles an array and returns the new, shuffled array
	*/
	static shuffleArray(array) {
	    for (var i = array.length - 1; i > 0; i--) {
	        var j = Math.floor(Math.random() * (i + 1));
	        var temp = array[i];
	        array[i] = array[j];
	        array[j] = temp;
	    }
	    return array;
	}
}
